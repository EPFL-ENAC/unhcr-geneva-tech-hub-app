trigger: none

parameters:
  - name: environment
    displayName: Where to deploy?
    type: string
    default: dev
    values:
    - dev
    - test
    - prod

variables:
 - group: ${{parameters.environment}}

stages:
- stage: Build
  displayName: 'Build and Push Docker Images'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        docker login $(azureContainerRegistryName).azurecr.io --username $(dockerUser) --password $(dockerPassword)
      displayName: 'Docker Login'
    - script: |
        docker build -t $(azureContainerRegistryName).azurecr.io/tss-rest-api:az.$(Build.BuildId) ./rest-api -f ./rest-api/Dockerfile
        docker push $(azureContainerRegistryName).azurecr.io/tss-rest-api:az.$(Build.BuildId)
      displayName: 'Build and Push Rest API'
    - script: |
        docker build -t $(azureContainerRegistryName).azurecr.io/tss-frontend:az.$(Build.BuildId) ./frontend -f ./frontend/Dockerfile
        docker push $(azureContainerRegistryName).azurecr.io/tss-frontend:az.$(Build.BuildId)
      displayName: 'Build and Push Frontend'
    - script: |
        docker build -t $(azureContainerRegistryName).azurecr.io/tss-caddy:az.$(Build.BuildId) ./caddy -f ./caddy/Dockerfile
        docker push $(azureContainerRegistryName).azurecr.io/tss-caddy:az.$(Build.BuildId)
      displayName: 'Build and Push Caddy Image'
- stage: UpdateK8sSecrets
  displayName: 'Update Kubernetes Secrets'
  jobs:
  - job: UpdateK8sSecrets
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Get AKS Credentials'
      inputs:
        azureSubscription: 'TIMSAzureConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(ARG_NAME) --name $(AKS_NAME) --overwrite-existing
    - task: AzureCLI@2
      displayName: 'Create/Update Secrets in Kubernetes'
      inputs:
        azureSubscription: 'TIMSAzureConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          kubectl create secret generic tss-secret \
            --from-literal=AZURE_ACCOUNT_KEY=$(AZURE_ACCOUNT_KEY) \
            --from-literal=AZURE_ACCOUNT_NAME=$(AZURE_ACCOUNT_NAME) \
            --from-literal=AZURE_CONTAINER_NAME=$(AZURE_CONTAINER_NAME) \
            --from-literal=AZURE_CONTAINER_PREFIX=$(AZURE_CONTAINER_PREFIX) \
            --from-literal=COUCHDB_PASSWORD=$(COUCHDB_PASSWORD) \
            --from-literal=COUCHDB_USER=$(COUCHDB_USER) \
            --namespace tims --dry-run=client -o yaml | kubectl apply -f -
- stage: DeployHelmChart
  displayName: 'Deploy Helm Chart'
  dependsOn: UpdateK8sSecrets
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Get AKS Credentials'
      inputs:
        azureSubscription: 'TIMSAzureConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(ARG_NAME) --name $(AKS_NAME) --overwrite-existing
    - task: HelmInstaller@1
      inputs:
        helmVersion: '3.x'
      displayName: 'Install Helm'
    - script: |
        cd k8s/helm/__main__
        helm dependency update
      displayName: 'Update Helm Dependencies'
    - script: |
        helm upgrade tss-app ./__main__ --namespace tims \
          -f ./__main__/values/${{ parameters.environment }}/values.yaml \
          --install \
          --set global.__common__.image.tag=az.$(Build.BuildId)
      displayName: 'Helm Upgrade'

